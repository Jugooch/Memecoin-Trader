# Frontrun Bot - Core Dependencies
# Install with: pip install -r requirements.txt
#
# Phase 1 Dependencies (Core RPC Infrastructure)
# Last updated: 2025-10-06

# ============================================================================
# WebSocket Communication
# ============================================================================
websockets>=12.0
    # Purpose: WebSocket client for Solana RPC connections
    # Used in: core/rpc_manager.py
    # Why: Real-time subscriptions (account changes, slot updates)
    # Alternative: None (Solana requires WebSocket for subscriptions)

# ============================================================================
# Async HTTP Client
# ============================================================================
aiohttp>=3.9.5
    # Purpose: Async HTTP client for RPC POST requests
    # Used in: Future Phase 2 (HTTP RPC calls)
    # Why: Some Solana RPC methods only work over HTTP POST
    # Alternative: httpx (we chose aiohttp for ecosystem compatibility)

# ============================================================================
# Configuration Management
# ============================================================================
PyYAML>=6.0.1
    # Purpose: YAML configuration file parsing
    # Used in: core/config.py
    # Why: Human-readable config files with comments support
    # Alternative: JSON (but no comments), TOML (less common)

# ============================================================================
# Logging
# ============================================================================
structlog>=24.1.0
    # Purpose: Structured logging with JSON output
    # Used in: core/logger.py, all modules
    # Why: Searchable, parseable logs for production
    # Alternative: Standard logging (but unstructured)

# ============================================================================
# System Monitoring
# ============================================================================
psutil>=5.9.8
    # Purpose: CPU, memory, network monitoring
    # Used in: Future Phase 1 enhancement (health monitor)
    # Why: Detect resource exhaustion before failures
    # Alternative: None (best library for system metrics)

# ============================================================================
# Metrics Collection
# ============================================================================
prometheus-client==0.20.0
    # Purpose: Metrics export for Prometheus/Grafana
    # Used in: core/metrics.py
    # Why: Industry standard for time-series metrics
    # Alternative: StatsD, OpenTelemetry (we may add later)

# ============================================================================
# Phase 2 Dependencies (Transaction Infrastructure)
# ============================================================================
solders>=0.21.0
    # Purpose: Solana SDK for Python (fast, Rust-based)
    # Used in: core/tx_builder.py, core/tx_signer.py, core/tx_submitter.py
    # Why: Fastest Solana library for Python, built with Rust
    # Alternative: solana-py (slower, pure Python)

base58==2.1.1
    # Purpose: Base58 encoding/decoding
    # Used in: core/tx_signer.py (keypair handling)
    # Why: Solana uses Base58 for public keys and signatures
    # Alternative: None (standard for Solana)

PyNaCl==1.5.0
    # Purpose: Ed25519 cryptographic signatures
    # Used in: core/tx_signer.py (transaction signing)
    # Why: Solana uses Ed25519 for all transaction signatures
    # Alternative: cryptography (but PyNaCl is standard)

# ============================================================================
# Phase 4 Dependencies (Geyser/LaserStream Integration)
# ============================================================================
grpcio>=1.60.0
    # Purpose: gRPC runtime for Helius LaserStream (Yellowstone protocol)
    # Used in: services/mempool_monitor.py
    # Why: LaserStream uses Yellowstone gRPC for ultra-low latency streaming
    # Alternative: None (required for gRPC)

grpcio-tools>=1.60.0
    # Purpose: gRPC code generation tools
    # Used in: Generated proto/geyser_pb2.py from yellowstone-grpc proto files
    # Why: Generate Python gRPC client from .proto definitions
    # Alternative: None (required for proto compilation)

protobuf>=4.21.0
    # Purpose: Protocol buffers for gRPC message serialization
    # Used in: services/mempool_monitor.py (message parsing)
    # Why: Required for gRPC message encoding/decoding
    # Alternative: None (gRPC dependency)

# ============================================================================
# Testing Dependencies (install separately with requirements-dev.txt)
# ============================================================================
# See requirements-dev.txt for pytest, coverage, etc.
aiosqlite>=0.19.0  # Async SQLite for position tracking
